import numpy as np

# Dados fornecidos
data = """
Algorithm,Vector Size,Average Time
b,10,3.768e-07
b,60,6.9023e-06
b,110,2.05078e-05
b,160,4.12084e-05
b,210,6.61392e-05
b,260,9.88788e-05
b,310,0.000140036
b,360,0.000185253
b,410,0.000233308
b,460,0.000295364
b,510,0.000359848
b,560,0.000423406
b,610,0.000501124
b,660,0.000584522
b,710,0.000658866
b,760,0.000753876
b,810,0.00085096
b,860,0.000978544
b,910,0.00105932
b,960,0.00118988
b,1010,0.00131597
i,10,3.1306e-07
i,60,2.39132e-06
i,110,6.51182e-06
i,160,1.27806e-05
i,210,2.13224e-05
i,260,3.14912e-05
i,310,5.06674e-05
i,360,5.96466e-05
i,410,7.71424e-05
i,460,9.41328e-05
i,510,0.000118919
i,560,0.000144351
i,610,0.000160784
i,660,0.000188658
i,710,0.00022297
i,760,0.00024762
i,810,0.000284612
i,860,0.000324294
i,910,0.000364574
i,960,0.00039605
i,1010,0.000437708
s,10,5.1484e-07
s,60,5.2352e-06
s,110,1.435e-05
s,160,2.76292e-05
s,210,4.4504e-05
s,260,6.73606e-05
s,310,9.35428e-05
s,360,0.000121514
s,410,0.000153177
s,460,0.000189406
s,510,0.0002302
s,560,0.000279308
s,610,0.00033001
s,660,0.00038405
s,710,0.000445568
s,760,0.000489022
s,810,0.000557048
s,860,0.000618628
s,910,0.000685134
s,960,0.000868132
s,1010,0.000841602
m,10,1.28034e-06
m,60,5.49286e-06
m,110,9.9873e-06
m,160,1.52596e-05
m,210,1.98312e-05
m,260,2.50354e-05
m,310,3.11064e-05
m,360,3.63692e-05
m,410,4.16468e-05
m,460,4.43076e-05
m,510,4.9997e-05
m,560,5.5427e-05
m,610,6.19342e-05
m,660,6.59602e-05
m,710,7.21662e-05
m,760,7.82862e-05
m,810,8.44434e-05
m,860,8.82324e-05
m,910,9.15532e-05
m,960,9.48342e-05
m,1010,0.000108858
q,10,6.7734e-07
q,60,3.62024e-06
q,110,6.94936e-06
q,160,1.05802e-05
q,210,1.39389e-05
q,260,1.73093e-05
q,310,2.221e-05
q,360,2.50556e-05
q,410,2.8857e-05
q,460,3.33682e-05
q,510,3.68584e-05
q,560,4.07258e-05
q,610,4.5202e-05
q,660,6.21018e-05
q,710,5.34446e-05
q,760,5.63874e-05
q,810,6.57322e-05
q,860,7.61562e-05
q,910,8.89574e-05
q,960,9.8159e-05
q,1010,0.000106325
h,10,6.7788e-07
h,60,4.30556e-06
h,110,9.06156e-06
h,160,1.56104e-05
h,210,1.9326e-05
h,260,2.9493e-05
h,310,3.06874e-05
h,360,4.39632e-05
h,410,4.12404e-05
h,460,5.14746e-05
h,510,5.60092e-05
h,560,5.98398e-05
h,610,8.28684e-05
h,660,7.17884e-05
h,710,8.02004e-05
h,760,9.71472e-05
h,810,9.13634e-05
h,860,0.000108847
h,910,0.000112678
h,960,0.000114387
h,1010,0.000124752
c,10,2.2166e-07
c,60,2.3856e-07
c,110,2.3216e-07
c,160,2.32e-07
c,210,2.8498e-07
c,260,2.263e-07
c,310,2.2572e-07
c,360,2.2878e-07
c,410,3.2192e-07
c,460,2.5112e-07
c,510,2.5258e-07
c,560,2.6074e-07
c,610,2.4556e-07
c,660,2.4052e-07
c,710,2.5952e-07
c,760,2.2208e-07
c,810,2.2708e-07
c,860,3.0534e-07
c,910,2.2518e-07
c,960,2.5996e-07
c,1010,2.1566e-07
bs,10,5.2478e-07
bs,60,1.29358e-06
bs,110,1.94686e-06
bs,160,2.75994e-06
bs,210,4.1332e-06
bs,260,4.26418e-06
bs,310,5.04456e-06
bs,360,6.1328e-06
bs,410,6.83546e-06
bs,460,7.64526e-06
bs,510,8.4938e-06
bs,560,9.2565e-06
bs,610,1.14637e-05
bs,660,1.21868e-05
bs,710,1.47834e-05
bs,760,1.42605e-05
bs,810,1.29592e-05
bs,860,1.40675e-05
bs,910,1.49447e-05
bs,960,1.7033e-05
bs,1010,2.1036e-05
r,10,6.4896e-07
r,60,2.48758e-06
r,110,4.9404e-06
r,160,7.27438e-06
r,210,1.11054e-05
r,260,1.13764e-05
r,310,1.33497e-05
r,360,1.49919e-05
r,410,2.01106e-05
r,460,1.90831e-05
r,510,2.16682e-05
r,560,2.38078e-05
r,610,2.72888e-05
r,660,3.18074e-05
r,710,3.5999e-05
r,760,3.24618e-05
r,810,3.62528e-05
r,860,3.87048e-05
r,910,4.02206e-05
r,960,4.34928e-05
r,1010,5.75914e-05
"""

# Organizando os dados em um dicionário
data_lines = data.strip().split('\n')
data_dict = {}
for line in data_lines[1:]:
    algorithm, vector_size, avg_time = line.split(',')
    if algorithm not in data_dict:
        data_dict[algorithm] = []
    data_dict[algorithm].append((int(vector_size), float(avg_time)))

# Calculando o coeficiente de determinação R^2 para cada algoritmo
r_squared = {}
for algorithm, values in data_dict.items():
    x = np.array([val[0] for val in values])
    y = np.array([val[1] for val in values])
    # Calculando a linha de melhor ajuste
    p = np.polyfit(x, y, 1)
    y_pred = np.polyval(p, x)
    # Calculando R^2
    ss_total = np.sum((y - np.mean(y)) ** 2)
    ss_residual = np.sum((y - y_pred) ** 2)
    r_squared[algorithm] = 1 - (ss_residual / ss_total)

# Exibindo os coeficientes de determinação R^2 para cada algoritmo
for algorithm, r2 in r_squared.items():
    print(f"Algoritmo: {algorithm}, R^2: {r2}")